datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Set {
  id   String @id @default(cuid())
  name String @unique
  code String @unique
  Card Card[]
}

model Card {
  id        String @id @default(cuid())
  type      String
  artwork   String
  contentId String
  set       Set    @relation(fields: [setId], references: [id])
  setId     String

  @@unique([setId, contentId])
}

model Energy {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id                String              @id @default(cuid())
  name              String              @unique
  color             String              @unique
  reactionsAsInput  Reaction[]          @relation(name: "EnergyReactionInputs")
  reactionsAsOutput Reaction[]          @relation(name: "EnergyReactionOutputs")
  livingBeings      LivingBeingEnergy[]
  deadBeings        DeadBeingEnergy[]
  actionCosts       ActionEnergyCost[]
  BrokenItemEnergy  BrokenItemEnergy[]
  ItemEnergy        ItemEnergy[]
}

model Reaction {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id       String   @id @default(cuid())
  name     String   @unique
  inputs   Energy[] @relation(name: "EnergyReactionInputs")
  outputs  Energy[] @relation(name: "EnergyReactionOutputs")
  timeUnit String
  time     Int
}

model Biome {
  id   String @id @default(cuid())
  name String @unique
}

model Being {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id          String              @id @default(cuid())
  name        String              @unique
  energies    LivingBeingEnergy[]
  remains     DeadBeingEnergy[]
  contentType String
  contentId   String

}

model LivingBeingEnergy {
  amount   Int
  isCore   Boolean
  energyId String
  energy   Energy  @relation(fields: [energyId], references: [id])
  beingId  String
  being    Being   @relation(fields: [beingId], references: [id])

  @@unique([energyId, beingId])
}

model DeadBeingEnergy {
  amount   Int
  energyId String
  energy   Energy @relation(fields: [energyId], references: [id])
  beingId  String
  being    Being  @relation(fields: [beingId], references: [id])

  @@unique([energyId, beingId])
}

model ItemEnergy {
  amount   Int
  energyId String
  energy   Energy @relation(fields: [energyId], references: [id])
  itemId   String
  item     Item   @relation(fields: [itemId], references: [id])

  @@unique([energyId, itemId])
}

model BrokenItemEnergy {
  amount   Int
  energyId String
  energy   Energy @relation(fields: [energyId], references: [id])
  itemId   String
  item     Item   @relation(fields: [itemId], references: [id])

  @@unique([energyId, itemId])
}

model ActionEnergyCost {
  amount   Int
  energyId String
  energy   Energy @relation(fields: [energyId], references: [id])
  actionId String
  action   Action @relation(fields: [actionId], references: [id])

  @@unique([energyId, actionId])
}

model Action {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id       String  @id @default(cuid())
  name     String  @unique
  tags     String
  effect   String
  flavor   String?
  level    Int
  time     Int
  timeUnit String

  isIntercept Boolean
  isResponse  Boolean
  isSecret    Boolean
  isPlan      Boolean

  energyTransfer ActionEnergyCost[]
}

model Item {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id             String             @id @default(cuid())
  name           String             @unique
  nameWhenBroken String
  tags           String
  level          Int
  flavor         String?
  energies       ItemEnergy[]
  remains        BrokenItemEnergy[]
  contentType    String
  contentId      String
}
